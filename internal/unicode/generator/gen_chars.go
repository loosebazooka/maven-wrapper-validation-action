//+build gen

package main

//go:generate go run gen_chars.go

// embeds chars.txt which itself is a copy of https://raw.githubusercontent.com/codebox/homoglyph/master/raw_data/chars.txt
// make sure you update that file and run "make gen" from the root of the project

import (
	"bufio"
	"log"
	"os"
	"strings"
	"text/template"
)

const (
	charsFile = "chars.txt"
	charKeys  = ".-_aejmnprwv" // maven-wrapper.jar and _
	target    = "../chars.go"
)

func main() {
	chars, err := os.Open(charsFile)
	if err != nil {
		log.Fatal("Failed to parse homoglyph file", err)
	}
	sc := bufio.NewScanner(chars)
	homoglyphs := map[rune]string{}
	for _, c := range charKeys {
		homoglyphs[c] = ""
	}

	for sc.Scan() {
		line := sc.Text()
		if strings.HasPrefix(line, "#") {
			continue
		}

		for _, c := range charKeys {
			if strings.ContainsRune(line, c) {
				homoglyphs[c] = homoglyphs[c] + strings.TrimSpace(line)
			}
		}
	}
	f, err := os.Create(target)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	t, err := template.New("char map").Parse(templateStr)
	if err != nil {
		log.Fatal(err)
	}
	err = t.Execute(f, homoglyphs)
	if err != nil {
		log.Fatal(err)
	}

}

var templateStr = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// using generator/gen_chars.go with data from generated/chars.txt

// only cares about the characters in the name "maven-wrapper.jar"
// and "maven_wrapper.jar" (just in case)

package unicode

var homoglyphs = map[rune]string{
{{range $key, $value := . }}
	{{- printf "\t%q: %q,\n" $key $value }}
{{- end }}
}
`
